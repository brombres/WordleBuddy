class WordList : String[]
  METHODS
    method init

    method init( existing:WordList )
      clear
      reserve( existing.count )
      add( existing )

    method cloned->WordList
      return WordList( this )

    method letters->Character[]
      # Returns frequency-ranked letters
      local letter_counts = Dim<<LetterCount>>( 26 )
      forEach (i in 0..25) letter_counts[i] = LetterCount('a'+i)
      forEach (ch in (forEach in this))
        local i = ch - 'a'
        letter_counts[i] .= incremented
      endForEach
      letter_counts.sort( (a,b) => a.count > b.count )

      local result = Character[](26)
      forEach (letter_count in letter_counts)
        if (letter_count.count) result.add( letter_count.letter )
      endForEach
      return result

    method remove_words_containing( ch:Character )
      forEach (word in rewriter=this.rewriter)
        if (not word.contains(ch)) rewriter.write( word )
      endForEach

    method remove_words_not_containing( ch:Character )
      forEach (word in rewriter=this.rewriter)
        if (word.contains(ch)) rewriter.write( word )
      endForEach

    method remove_words_not_using( letters:Character[], n:Int32, &allow_duplicates )
      # Each word must use 5 of the first 'n' letters.
      forEach (word in rewriter=this.rewriter)
        local count = 0
        forEach (i in 0..<n)
          local letter_count = word.count( letters[i] )
          if (letter_count == 1 or (letter_count > 1 and allow_duplicates))
            count += letter_count
          endIf
        endForEach
        if (count == 5) rewriter.write( word )
      endForEach
endClass

class LetterCount( letter:Character, count=0:Int32 )
  METHODS
    method incremented->LetterCount
      return LetterCount( letter, count+1 )
endClass

