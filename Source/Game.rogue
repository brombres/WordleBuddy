class Game( solver=false:Logical )
  PROPERTIES
    gamestate = GameState()

  METHODS
    method play
      gamestate.print_result( "?????", "*****" )
      local guesses = 0
      loop
        local word = choose_word(
          gamestate.solution_recommendations,
          gamestate.disambiguation_recommendations
        )
        if (not word) nextIteration

        ++guesses
        local score = gamestate.score_word( word )
        gamestate.print_result( word, score )
        if (word.to_uppercase == score) escapeLoop

        gamestate.refine_candidates( word, score )
      endLoop

      println "Solved in # guess".pluralized(guesses)

    method choose_word( solutions:WordList, disambiguations:WordList )->String
      if (not solver)
        gamestate.show_used_letters
        println "Enter your next guess."
        local word = Console.input( "> " )
        if (word == "") return null
        if (word == "q" or word == "quit") System.exit
        if (word.count != 5)
          println "Your guess must be a 5-letter word."
          return null
        endIf
        return word.to_lowercase
      endIf

      if (solutions.count == 1)
        gamestate.show_used_letters
        Console.input( "Press RETURN to see the answer > " )
        return solutions.first
      endIf

      local max = solutions.count.or_larger( disambiguations.count )

      local header = "$/$ Possibilities"(solutions.count,gamestate.candidates.count).justified(-24)
      header += "Disambiguations"
      println header
      forEach (i in 0..<max)
        local left="", right="" : String
        if (i < solutions.count) left = "$. $" ((i+1).format("2"),solutions[i].to_uppercase)
        if (i < disambiguations.count) right = "$. $" ((i+solutions.count+1).format("2"),disambiguations[i].to_uppercase)
        left .= justified(-24)
        println left + right
      endForEach
      gamestate.show_used_letters

      local word = Console.input( "> " ).to_lowercase
      if (word == "q" or word == "quit") System.exit

      if (word == "") return null

      if (word.count <= 2)
        local n = word->Int32
        if (n >= 1 and n <= solutions.count)
          word = solutions[ n - 1 ]
        else
          n -= solutions.count
          if (n >= 1 and n <= disambiguations.count) word = disambiguations[ n - 1 ]
        endIf
      endIf

      if (word.count != 5)
        println "Your guess must be a number 1..$ or a 5-letter word." (solutions.count + disambiguations.count)
        return null
      endIf

      return word

endClass

